{"version":3,"sources":["Movies.js","App.js","index.js"],"names":["changeStringFormat","arr","join","Movie","id","year","rating","runtime","title_long","genres","summary","poster","className","src","alt","title","slice","App","state","isLoading","movies","dotCount","getMovies","a","axios","get","moviesOfYTS","data","setState","renderMovie","ele","medium_cover_image","this","type","color","width","height","map","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAoBA,SAASA,EAAmBC,GAEzB,OADkBA,EAAIC,KAAK,MAefC,MAhCf,YAAmF,EAAlEC,GAAkE,EAA9DC,KAA8D,EAAxDC,OAAwD,EAAhDC,QAAiD,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OACtE,OACG,sBAAKC,UAAU,mBAAf,UACG,sBAAMA,UAAU,uBAAhB,SACG,qBAAKC,IAAKF,EAAQG,IAAI,UAAUC,MAAOP,MAG1C,sBAAKI,UAAU,cAAf,UACG,qBAAIA,UAAU,eAAd,cAA+BJ,EAA/B,OACA,qBAAII,UAAU,gBAAd,cAAgCZ,EAAmBS,GAAnD,QACA,oBAAGG,UAAU,iBAAb,cAAgCF,EAAQM,MAAM,EAAG,KAAjD,iB,yBCuEGC,G,kNA1EbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,GACRC,SAAU,G,EAGZC,U,sBAAY,8BAAAC,EAAA,sEAKgDC,IAAMC,IAAI,yEAL1D,gBAKsBC,EALtB,EAKFC,KAAQA,KAAQP,OAOxB,EAAKQ,SAAS,CAAET,WAAW,EAAOC,OAAQM,IAZhC,2C,EAuBZG,YAAc,SAACC,GACb,OAAQ,cAAC,EAAD,aAEN1B,GAAI0B,EAAI1B,GACRC,KAAMyB,EAAIzB,KACVC,OAAQwB,EAAIxB,OACZC,QAASuB,EAAIvB,QACbC,WAAYsB,EAAItB,WAChBC,OAAQqB,EAAIrB,OACZC,QAASoB,EAAIpB,QACbC,OAAQmB,EAAIC,oBATN,SAUED,EAAIrB,QATPqB,EAAI1B,K,uDAcb,WACE4B,KAAKV,c,oBAGP,WAGE,MAA8BU,KAAKd,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEnB,OACE,yBAASR,UAAU,YAAnB,SACGO,EACC,sBAAKP,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,wBAGA,wCACA,cAAC,IAAD,CAAcqB,KAAM,OAAQC,MAAO,UAAWC,MAAO,OAAQC,OAAQ,YAGvE,sBAAKxB,UAAU,SAAf,UACGQ,EAAOiB,IAAIL,KAAKH,aADnB,a,GAlEQS,IAAMC,YCNxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b593928b.chunk.js","sourcesContent":["import react from \"react\";\r\nimport PropTypes, { number } from \"prop-types\";\r\nimport './App.css'\r\n\r\nfunction Movie({ id, year, rating, runtime, title_long, genres, summary, poster }) {\r\n   return (\r\n      <div className=\"movies_container\">\r\n         <span className=\"movies_container_img\">\r\n            <img src={poster} alt=\"noImage\" title={title_long} />\r\n         </span>\r\n\r\n         <div className=\"movies_data\">\r\n            <h2 className=\"movies_title\"> {title_long} </h2>\r\n            <h4 className=\"movies_genres\"> {changeStringFormat(genres)}  </h4>\r\n            <p className=\"movies_summary\"> {summary.slice(0, 250)}... </p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nfunction changeStringFormat(arr) {\r\n   const tmpString = arr.join(', ');\r\n   return tmpString;\r\n}\r\n\r\nMovie.propTypes = {\r\n   id: PropTypes.number.isRequired,\r\n   year: PropTypes.number.isRequired,\r\n   rating: PropTypes.number.isRequired,\r\n   runtime: PropTypes.number.isRequired,\r\n   title_long: PropTypes.string.isRequired,\r\n   genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n   summary: PropTypes.string.isRequired,\r\n   poster: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Movie;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movies\";\nimport './App.css'\nimport './Movies.css'\nimport ReactLoading from \"react-loading\";\nimport { red } from \"jest-matcher-utils/node_modules/chalk\";\n\n{/* README.md 참조 */ }\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n    dotCount: 0\n  };\n\n  getMovies = async () => {\n    /*  axios의 get 메소드 수행이 끝날 때까지 기다림\n        왜냐하면, axios의 get 메소드 수행이 완료되기까지 시간이 필요하다는 판단에 의함\n        이는 Promise 방식을 쓰는 것과 같은 효과이다.\n    */\n    const { data: { data: { movies: moviesOfYTS } } } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\n    /* fetch(Promise 방식)를 쓰면 다음과 같다.\n      const movie = fetch(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\")\n        .then((res) => res.json())\n        .then((json => { return json }));\n    */\n\n    this.setState({ isLoading: false, movies: moviesOfYTS });\n  }\n\n  // changeStringFormat = (arr) => {\n  //   for (let i = arr.length - 2; i >= 0; i--) {\n  //     arr[i] += \", \";\n  //   }\n  //   console.log(arr);\n  //   return arr;\n  // }\n\n  renderMovie = (ele) => {\n    return (<Movie\n      key={ele.id}\n      id={ele.id}\n      year={ele.year}\n      rating={ele.rating}\n      runtime={ele.runtime}\n      title_long={ele.title_long}\n      genres={ele.genres}\n      summary={ele.summary}\n      poster={ele.medium_cover_image}\n      genres={ele.genres}\n    />);\n  }\n\n  // 첫 render 실행 이후 호출\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n\n    // 객체 구조 분해 할당\n    const { isLoading, movies } = this.state;\n\n    return (\n      <section className=\"container\">\n        {isLoading ?\n          <div className=\"loader\">\n            <span className=\"loader_text\">\n              Loading...\n            </span>\n            <span>&nbsp;</span>\n            <ReactLoading type={\"spin\"} color={\"skyblue\"} width={\"50px\"} height={\"50px\"} />\n          </div>\n          :\n          <div className=\"movies\">\n            {movies.map(this.renderMovie)};\n          </div>\n        }\n      </section>\n    )\n  };\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}